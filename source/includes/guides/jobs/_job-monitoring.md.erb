### Job monitoring

Once you submit your job request, the job will be handed off to Agave's back end execution service. Your job may run right away, or it may wait in a batch queue on the execution system until the required resources are available. Either way, the execution process occurs completely asynchronous to the submission process. To monitor the status of your job, Agave supports two different mechanisms: polling and webhooks.

<aside class="notice">For the sake of brevity, we placed a detailed explanation of the job lifecycle in a separate, aptly title post, <a href="http://agaveapi.co/documentation/tutorials/job-management-tutorial/the-job-lifecycle" title="The Job Lifecycle">The Job Lifecycle</a>. There you will find detailed information about how, when, and why everything moves from place to place and how you can peek behind the curtains.</aside>

#### Polling

If you have ever taken a long road trip with children, you are probably painfully aware of how polling works. Starting several minutes from the time you leave the house, a child asks, <a href="https://www.youtube.com/watch?v=4vUBsTJYK28&amp;w=640&amp;h=385" title="Are we there yet Shrek?" target="_blank">"Are we there yet?"</a> You reply, "No." Several minutes later the child again asks, "Are we there yet?" You again reply, "No." This process continues until you finally arrive at your destination. <strong>This is called polling and polling is bad</strong>

Polling for your job status works the same way. After submitting your job, you start a while loop that queries the Jobs service for your job status until it detects that the job is in a terminal state. The following two URLs both return the status of your job. The first will result in a list of abbreviated job descriptions, the second will result in a full description of the job with the given $JOB_ID, exactly like that returned when submitting the job. The third will result in a much smaller response object that contains only the $JOB_ID and status being returned.

```shell
curl -sk -H "Authorization: Bearer  $ACCESS_TOKEN" https://public.tenants.agaveapi.co/jobs/v2
curl -sk -H "Authorization: Bearer  $ACCESS_TOKEN" https://public.tenants.agaveapi.co/jobs/v2/0001414144065563-5056a550b8-0001-007
curl -sk -H "Authorization: Bearer  $ACCESS_TOKEN" https://public.tenants.agaveapi.co/jobs/v2/0001414144065563-5056a550b8-0001-007/status
```

Sample response snippet

```json
{
  "status" : "success",
  "message" : null,
  "version" : "2.1.0-r6d11c",
  "result" : {
    "id" : "0001414144065563-5056a550b8-0001-007",
    "status" : "FINISHED",
    "_links" : {
      "self" : {
        "href" : "$API_BASE_URL/jobs/v2/0001414144065563-5056a550b8-0001-007"
      }
    }
  }
}
```

The list of all possible job statuses is given in table 2.

<%= partial "includes/tables/71" %>

<p class="table-caption">Table 2. Job statuses listed in progressive order from job submission to completion.</p>

Polling is an incredibly effective approach, but it is bad practice for two reasons. First, it does not scale well. Querying for one job status every few seconds does not take much effort, but querying for 100 takes quite a bit of time and puts unnecessary load on Agave's servers. Second, polling provides what is effectively a binary response. It tells you whether a job is done or not done, it does not give you any information on what is actually going on with the job or where it is in the overall execution process.

The job history URL provides much more detailed information on the various state changes, system messages, and progress information associated with data staging. The syntax of the job history URL is as follows

```shell
curl -sk -H "Authorization: Bearer  $ACCESS_TOKEN" https://public.tenants.agaveapi.co/jobs/v2/0001414144065563-5056a550b8-0001-007/history
```

Sample response snippet

```json
{
  "status":"success",
  "message":null,
  "version":"2.1.0-r6d11c",
  "result":[
    {
      "created":"2014-10-24T04:47:45.000-05:00",
      "status":"PENDING",
      "description":"Job accepted and queued for submission."
    },
    {
      "created":"2014-10-24T04:47:47.000-05:00",
      "status":"PROCESSING_INPUTS",
      "description":"Attempt 1 to stage job inputs"
    },
    {
      "created":"2014-10-24T04:47:47.000-05:00",
      "status":"PROCESSING_INPUTS",
      "description":"Identifying input files for staging"
    },
    {
      "created":"2014-10-24T04:47:48.000-05:00",
      "status":"STAGING_INPUTS",
      "description":"Staging agave://$PUBLIC_STORAGE_SYSTEM/$API_USERNAME/inputs/pyplot/testdata.csv to remote job directory"
    },
    {
      "progress":{
        "averageRate":0,
        "totalFiles":1,
        "source":"agave://$PUBLIC_STORAGE_SYSTEM/$API_USERNAME/inputs/pyplot/testdata.csv",
        "totalActiveTransfers":0,
        "totalBytes":3212,
        "totalBytesTransferred":3212
      },
      "created":"2014-10-24T04:47:48.000-05:00",
      "status":"STAGING_INPUTS",
      "description":"Copy in progress"
    },
    {
      "created":"2014-10-24T04:47:50.000-05:00",
      "status":"STAGED",
      "description":"Job inputs staged to execution system"
    },
    {
      "created":"2014-10-24T04:47:55.000-05:00",
      "status":"SUBMITTING",
      "description":"Preparing job for submission."
    },
    {
      "created":"2014-10-24T04:47:55.000-05:00",
      "status":"SUBMITTING",
      "description":"Attempt 1 to submit job"
    },
    {
      "created":"2014-10-24T04:48:08.000-05:00",
      "status":"RUNNING",
      "description":"Job started running"
    },
    {
      "created":"2014-10-24T04:48:12.000-05:00",
      "status":"CLEANING_UP"
    },
    {
      "created":"2014-10-24T04:48:15.000-05:00",
      "status":"FINISHED",
      "description":"Job completed. Skipping archiving at user request."
    }
  ]
}
```

Depending on the nature of your job and the reliability of the underlying systems, the response from this service can grow rather large, so it is important to be aware that this query can be an expensive call for your client application to make. Everything we said before about polling job status applies to polling job history with the additional caveat that you can chew through quite a bit of bandwidth polling this service, so keep that in mind if your application is bandwidth starved.

Often times, however, polling is unavoidable. In these situations, we recommend using an <a href="http://en.wikipedia.org/wiki/Exponential_backoff" title="Exponential Backoff" target="_blank">exponential backoff</a> to check job status. An exponential backoff is an alogrithm that increases the time between retries as the number of failures increases.

#### Webhooks

Webhooks are the alternative, preferred way for your application to monitor the status of asynchronous actions in Agave. If you are a <a href="http://en.wikipedia.org/wiki/Design_Patterns_(book)" title="Gang of Four" target="_blank">Gang of Four</a> disciple, webhooks are a mechanism for implementing the <a href="http://en.wikipedia.org/wiki/Observer%5Fpattern" title="Observer Pattern" target="_blank">Observer Pattern</a>. They are widely used across the web and chances are that something you're using right now is leveraging them. In the context of Agave, a webhook is a URL that you give to Agave in advance of an event which it later POSTs a response to when that event occurs. A webhook can be any web accessible URL.

<aside class="notice">For more information about webhooks, events, and notifications in Agave, please see the <a href="http://developer.agaveapi.co/#notifications/" title="Notifications Guide">Notifications</a> and <a href="http://developer.agaveapi.co/#events/" title="Events Guide">Events</a> Guides.</aside>

The Jobs service provides several template variables for constructing dynamic URLs. Template variables can be included anywhere in your URL by surrounding the variable name in the following manner `${VARIABLE_NAME}`. When an event of interest occurs, the variables will be resolved and the resulting URL called. Several example urls are given below.

```json
http://example.com/?job_id=${JOB_ID}&amp;job_status=${EVENT}

http://example.com/trigger/job/${JOB_NAME}/${EVENT}

http://example.com/webhooks/?nonce=sdfkajerouiwe234289fahlkqr&amp;id=${JOB_ID}&amp;status=${EVENT}&amp;start=${JOB_START_TIME}&amp;end=${JOB_END_TIME}&amp;url=${JOB_ARCHIVE_URL}
```

The full list of template variables are listed in the following table.

<%= partial "includes/tables/33" %>

<p class="table-caption">Table 3. Template variables available for use when defining webhooks for your job.</p>

#### Email

In situations where you do not have a persistent web address, or access to a backend service, you may find it more convenient to subscribe for email notifications rather then providing a webhook. Agave supports email notifications as well. Simply specify a valid email address in the `url` field in your job submission notification object and an email will be sent to that address when a relevant event occurs. A sample email message is given below.

```json
The status of job 0001414144065563-5056a550b8-0001-007, "demo-pyplot-demo-advanced test-1414139896," has changed to FINISHED.

Name: demo-pyplot-demo-advanced test-1414139896
URL: https://public.tenants.agaveapi.co/jobs/v2/0001414144065563-5056a550b8-0001-007
Message: Job completed successfully.
Submit Time: 2014-10-24T04:48:11.000-05:00
Start Time: 2014-10-24T04:48:08.000-05:0
End Time: 2014-10-24T04:48:15.000-05:00
Output Path: $API_USERNAME/archive/jobs/job-0001414144065563-5056a550b8-0001-007
Output URL: https://public.tenants.agaveapi.co/jobs/v2/0001414144065563-5056a550b8-0001-007/outputs
```

#### Websockets

Websockets are a realtime approach to monitoring where your client application listens on a dedicated channel for notification messages from Agave. Simply subscribe to Agave's websocket server ([https://realtime.agaveapi.co](https://realtime.agaveapi.co) and listen for a channel matching the job id.

```json
/agave.prod/$API_USERNAME/$JOB_ID
```
