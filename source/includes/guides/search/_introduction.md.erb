## Search

```json
  /$$$$$$                                     /$$
 /$$__  $$                                   | $$
| $$  \__/ /$$$$$$  /$$$$$$  /$$$$$$  /$$$$$$| $$$$$$$
|  $$$$$$ /$$__  $$|____  $$/$$__  $$/$$_____| $$__  $$
 \____  $| $$$$$$$$ /$$$$$$| $$  \__| $$     | $$  \ $$
 /$$  \ $| $$_____//$$__  $| $$     | $$     | $$  | $$
|  $$$$$$|  $$$$$$|  $$$$$$| $$     |  $$$$$$| $$  | $$
 \______/ \_______/\_______|__/      \_______|__/  |__/
```

Search is a fundamental feature of the Agave Platform. Most of the core science APIs support a mature, URL-based query mechanism allowing you to search using a sql-inspired json syntax. The two exceptions are the Files and Metadata APIs. The Files service does not index the directory or file contents of registered systems, so there is no way for it to performantly search the file system. The metadata service supports MongoDB query syntax, thus allowing more flexible, and slightly more complex, querying syntax.

### Query syntax

```json
http://public.agaveapi.co/jobs/v2?name=test%20job
```

> You can include as multiple search expressions to build a more restrictive query.

```json
http://public.agaveapi.co/jobs/v2?name=test%20job&executionSystem=aws-demo&status=FAILED
```

By default, search is enabled on each collection endpoint allowing you to trim the response down to the results you care about most. The list of available search terms is identical to the attributes included in the JSON returned when requesting the full resource description.

<aside class="info">To see a full listing of the JSON attributes for each resource in the core science APIs, please see the <a href="/live-docs/" title="Live Docs">Live Docs</a>.</aside>

To search for a specific attribute, you simply append a search expression into the URL query of your request. For example:

<aside class="warning">Note that the values in your search expression must be URL encoded.</aside>

### Search operators

```shell
# systems with cloud in their name  
systems/v2?name.like=*cloud*

# apps modified between October 1 and October 30 of this year  
apps/v2?lastModified.between=10/1,10/30

# jobs with status equal to PENDING or ARCHIVING  
jobs/v2?id.in=PENDING,ARCHIVING
```

```plaintext
# systems with cloud in their name  
systems-search 'name.like=*cloud*'

# apps modified between October 1 and October 30 of this year  
apps-search 'lastModified.between=10/1,10/30'

# jobs with status equal to PENDING or ARCHIVING  
jobs-search 'id.in=PENDING,ARCHIVING'
```

By default, all search expressions are evaluated for equality. In order to perform more complex queries, you may append a search operator to the attribute in your search expression. The following examples should help clarify:

For resources with nested collections, you may use JSON dot notation to query the subresources in the collection.

```shell
# systems using Amazon S3 as the storage protocol  
systems/v2?storage.protocol.eq="S3"

# systems with a batch queue allowing more than 10 concurrent user jobs  
systems/v2?queues.maxUserJobs.gt=10
```

```plaintext
# systems using Amazon S3 as the storage protocol  
systems-search 'storage.protocol.eq=S3'

# systems with a batch queue allowing more than 10 concurrent user jobs  
systems-search 'queues.maxUserJobs.gt=10'
```

### Multiple operators

```shell
# jobs whos app has hadoop in the name, ran on a system with id aws-demo, and started
# any time during the last business week
jobs/v2?appId.like=*hadoop*&executionSystem.eq=aws-demo&startTime.between=last%20monday,last%20friday

# users who profile has a last name ending in ross and an email address ending in texas.edu
profiles/v2?lastname.like=*ross&email.like=*texas.edu

# failed login checks on the a system with uuid 0001409867973952-5056a550b8-0001-014
monitors/v2/?target.like=*ec2*&result.eq=FAILED&type=LOGIN
```

```plaintext
# jobs whos app has hadoop in the name, ran on a system with id aws-demo, and started
# any time during the last business week
jobs-search 'appId.like=*hadoop*' \
            'executionSystem.eq=aws-demo' \
            'startTime.between=last%20monday,last%20friday'

# users who profile has a last name ending in ross and an email address ending in texas.edu
profiles-search 'lastname.like=*ross' 'email.like=*texas.edu'

# failed login monitor checks on systems with "ec2" in the name
monitors-checks-search -M target.like=*ec2* \
                      'result.eq=FAILED' \
                      'type=LOGIN'
```

As before you can include multiple search expressions to narrow your results.

The full list of search operators is given in the following table.

<%= partial "includes/tables/78" %>

### Date support

Dates returned from the Agave core science API are always formatted as ISO8601 dates. When searching, however, a much more flexible date syntax is supported. The following table lists supported expressions by example.

<%= partial "includes/tables/79" %>

### Custom search result

> Search with multiple operators and return a custom response

```shell
# jobs whos app has hadoop in the name, ran on a system with id aws-demo, and started
# any time during the last business week
jobs/v2?appId.like=*cloud*&executionSystem.like=*docker*&startTime.after=2016-01-01&naked=true&limit=3
```

```plaintext
# jobs whos app has hadoop in the name, ran on a system with id aws-demo, and started
# any time during the last business week
jobs-search -v --limit=3 \
            --filter=id,appId,executionSystem,status,created \
            'appId.like=*cloud*' \
            'executionSystem.like=*docker*'
            'startTime.after=2016-01-01' \
            'naked=true'
```

> There response will be a JSON array of custom objects comprised of only the fields you specified in the `filter` query parameter.

```json
[
  {
    "id":"2974032102330798566-242ac115-0001-007",
    "appId":"cloud-runner-0.1.0u1",
    "executionSystem":"docker.tacc.utexas.edu",
    "status":"FINISHED",
    "created":"2016-11-03T16:04:53.000-05:00"
  },
  {
    "id":"8643408718823550490-242ac115-0001-007",
    "appId":"cloud-runner-0.1.0u1",
    "executionSystem":"docker.tacc.utexas.edu",
    "status":"FINISHED",
    "created":"2016-11-03T15:17:24.000-05:00"
  },
  {
    "id":"9049010248689521126-242ac115-0001-007",
    "appId":"cloud-runner-0.1.0u1",
    "executionSystem":"docker.tacc.utexas.edu",
    "status":"FINISHED",
    "created":"2016-11-03T15:17:07.000-05:00"
  }
]
```

By combining the search, filtering, and `naked` query parameters, you can query the API and return just the information you care about. The example search will return a JSON array of job objects with just the `id`, `appId`, `executionSystem`, `status`, and `created` fields from the full job object in the response. This combination of search, filtering, and pagination provides a powerful mechanism for generating custom views of the data.

<aside class="info">For more information on resolving uuid and expanding linked references in the response objects, see the <a href="#uuid">UUID Service Guide</a>.</aside>
